import pandas as pd
import matplotlib.pyplot as plt
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows

# Load the CSV file generated by the original file
df = pd.read_csv('payment_pos.csv', parse_dates=['date_time'])

# Create a new Excel workbook
wb = Workbook()
excel_filename = 'sales_analysis.xlsx'

def save_plot_to_excel(sheet_name):
    # Save the current figure to an Excel sheet
    ws = wb.create_sheet(title=sheet_name)
    plt.savefig(f'{sheet_name}.png')  # Save the figure as an image first
    img = plt.imread(f'{sheet_name}.png')

    # Add the image to the worksheet
    from openpyxl.drawing.image import Image
    img = Image(f'{sheet_name}.png')
    ws.add_image(img, 'A1')

# Analysis 1: Total Sales Over Time (Daily)
def plot_sales_over_time():
    df_daily_sales = df.resample('D', on='date_time')['Gross_amount'].sum()
    plt.figure(figsize=(10, 6))
    plt.plot(df_daily_sales.index, df_daily_sales.values, marker='o', linestyle='-', color='b')
    plt.title('Total Gross Sales Over Time (Daily)')
    plt.xlabel('Date')
    plt.ylabel('Gross Sales Amount')
    plt.grid(True)
    save_plot_to_excel('Daily_Sales_Trend')
    plt.close()

# Analysis 2: Transactions by Hour of the Day
def plot_transactions_by_hour():
    df['hour'] = df['date_time'].dt.hour
    hourly_transactions = df.groupby('hour')['Payment_number'].count()
    plt.figure(figsize=(10, 6))
    plt.bar(hourly_transactions.index, hourly_transactions.values, color='g')
    plt.title('Transactions by Hour of the Day')
    plt.xlabel('Hour of the Day')
    plt.ylabel('Number of Transactions')
    plt.grid(True)
    save_plot_to_excel('Transactions_By_Hour')
    plt.close()

# Analysis 3: Sales by Store
def plot_sales_by_store():
    store_sales = df.groupby('Store_name')['Gross_amount'].sum()
    plt.figure(figsize=(10, 6))
    store_sales.plot(kind='bar', color='purple')
    plt.title('Total Sales by Store')
    plt.xlabel('Store')
    plt.ylabel('Gross Sales Amount')
    plt.grid(True)
    save_plot_to_excel('Sales_By_Store')
    plt.close()

# Analysis 4: Payment Method Usage
def plot_payment_methods():
    payment_method_usage = df['Payment_method'].value_counts()
    plt.figure(figsize=(10, 6))
    payment_method_usage.plot(kind='pie', autopct='%1.1f%%', startangle=90, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])
    plt.title('Payment Method Distribution')
    plt.ylabel('')
    save_plot_to_excel('Payment_Methods')
    plt.close()

# Analysis 5: Average Transaction Value by Store
def plot_avg_transaction_value():
    avg_transaction_value = df.groupby('Store_name')['Gross_amount'].mean()
    plt.figure(figsize=(10, 6))
    avg_transaction_value.plot(kind='bar', color='orange')
    plt.title('Average Transaction Value by Store')
    plt.xlabel('Store')
    plt.ylabel('Average Gross Amount')
    plt.grid(True)
    save_plot_to_excel('Avg_Transaction_Value')
    plt.close()

# Analysis 6: Refund Eligibility by Store
def plot_refund_eligibility():
    refund_eligibility = df.groupby('Store_name')['Refund_Eligibility'].value_counts().unstack()
    refund_eligibility.plot(kind='bar', stacked=True, figsize=(10, 6), color=['#ff9999', '#66b3ff'])
    plt.title('Refund Eligibility by Store')
    plt.xlabel('Store')
    plt.ylabel('Number of Transactions')
    plt.grid(True)
    save_plot_to_excel('Refund_Eligibility')
    plt.close()

# Analysis 7: Discount Utilization
def plot_discount_utilization():
    discount_utilization = df[df['Discount'] > 0].groupby('Store_name')['Discount'].count()
    total_transactions = df.groupby('Store_name')['Discount'].count()
    discount_percentage = (discount_utilization / total_transactions) * 100
    discount_percentage.plot(kind='bar', figsize=(10, 6), color='c')
    plt.title('Discount Utilization by Store')
    plt.xlabel('Store')
    plt.ylabel('Percentage of Transactions with Discount (%)')
    plt.grid(True)
    save_plot_to_excel('Discount_Utilization')
    plt.close()

# Create all visualizations
plot_sales_over_time()
plot_transactions_by_hour()
plot_sales_by_store()
plot_payment_methods()
plot_avg_transaction_value()
plot_refund_eligibility()
plot_discount_utilization()

# Save the workbook
wb.save(excel_filename)
print(f"Analysis and visualizations have been saved to {excel_filename}.")
